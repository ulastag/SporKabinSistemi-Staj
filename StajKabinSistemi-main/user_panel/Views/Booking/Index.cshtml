@model IEnumerable<user_panel.Data.Cabin>

@{
    ViewData["Title"] = "Select a Cabin to Book";
}

@section Styles {
    @* UserPanel ile aynı stil dosyasını kullanarak tutarlı bir görünüm sağlıyoruz *@
    <link rel="stylesheet" href="~/css/user-panel.css" asp-append-version="true" />
}

<!-- CSS (No changes here) -->
<style>
    .location-hover {
        cursor: pointer;
        text-decoration: underline;
        text-decoration-style: dotted;
        text-decoration-color: var(--brand-accent);
    }

    #map-popup {
        display: none;
        position: absolute;
        width: 350px;
        height: 300px;
        z-index: 1050;
    }

    #map-canvas {
        width: 100%;
        height: 100%;
        border: 2px solid #007bff;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
</style>

<div class="container container-main-large">
    <div class="card-custom">
        <h2 class="text-center">@ViewData["Title"]</h2>
        <p class="text-center text-muted mb-4">Choose a location to make a reservation.</p>

        <!-- Search Bar (No changes here) -->
        <div class="mb-4">
            <input type="text" id="cabinSearchInput" class="form-control"
                   placeholder="Type to filter by location or description..." aria-label="Search" />
        </div>

        <div class="row g-4">
            @foreach (var cabin in Model)
            {
                <!-- The container we will show/hide -->
                <div class="col-md-6 cabin-card-container">
                    <div class="card h-100" style="background-color: #3d3d45; border-color: var(--border-color);">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title cabin-location" style="color: var(--brand-accent);">
                                <a asp-action="Details" asp-route-id="@cabin.Id" style="text-decoration: none; color: inherit;">
                                    <span class="location-hover" data-location="@($"{cabin.District.Name}, {cabin.District.City.Name}")">
                                        @cabin.District.City.Name / @cabin.District.Name
                                    </span>
                                </a>
                            </h5>
                            <!-- The description we will search in -->
                            <p class="card-text text-light flex-grow-1 cabin-description">@cabin.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fs-5 fw-bold" style="color: var(--text-light);">@cabin.PricePerHour.ToString("C")/hour</span>
                                <a asp-controller="Booking" asp-action="Create" asp-route-id="@cabin.Id" class="btn btn-primary">Book Now</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- No Results Message (No changes here) -->
        <div id="noResultsMessage" class="alert alert-warning text-center mt-4" style="display: none;">
            No cabins match your search.
        </div>
    </div>
</div>

<!-- HTML container for the map (No changes here) -->
<div id="map-popup">
    <div id="map-canvas"></div>
</div>


@section Scripts {
    <script>
        $(document).ready(function () {

            // --- START: Search Filter Logic ---

            const searchInput = $('#cabinSearchInput');
            const noResultsMessage = $('#noResultsMessage');

            // This function will run every time the user types in the search box
            searchInput.on('keyup', function () {
                // 1. Get the search term and make it lowercase for case-insensitive search
                const searchTerm = $(this).val().toLowerCase();
                let visibleCount = 0;

                // 2. Loop through each of the cabin cards
                $('.cabin-card-container').each(function () {
                    const card = $(this);

                    // 3. Get the text from the location and description inside the card
                    const locationText = card.find('.cabin-location').text().toLowerCase();
                    const descriptionText = card.find('.cabin-description').text().toLowerCase();
                    const combinedText = locationText + ' ' + descriptionText;

                    // 4. Check if the card's text contains the search term
                    if (combinedText.includes(searchTerm)) {
                        card.show(); // If it matches, show the card
                        visibleCount++;
                    } else {
                        card.hide(); // If it doesn't match, hide the card
                    }
                });

                // 5. Show or hide the "No Results" message based on how many cards are visible
                if (visibleCount === 0) {
                    noResultsMessage.show();
                } else {
                    noResultsMessage.hide();
                }
            });

            // --- END: Search Filter Logic ---


            // --- START: Existing Google Maps Logic (Unchanged) ---
            const mapPopup = $('#map-popup');

            $('.location-hover').on('mouseenter', function(e) {
                const rawLocation = $(this).data('location');
                const formattedLocation = rawLocation.replace('/', ', ');

                mapPopup.css({
                    top: e.pageY + 15 + 'px',
                    left: e.pageX + 15 + 'px'
                });

                showLocationOnMap(formattedLocation);
                mapPopup.show();
            });

            $('.location-hover').on('mouseleave', function() {
                mapPopup.hide();
            });
            // --- END: Existing Google Maps Logic ---
        });
    </script>

    <!-- =================================================================== -->
    <!-- Google Maps Initialization and API Script (Unchanged) -->
    <!-- =================================================================== -->
    <script>
        let map;
        let marker;
        let geocoder;

        function initMap() {
            const initialLocation = { lat: 39.9334, lng: 32.8597 };

            map = new google.maps.Map(document.getElementById("map-canvas"), {
                zoom: 12,
                center: initialLocation,
                disableDefaultUI: true,
            });

            marker = new google.maps.Marker({ map: map });
            geocoder = new google.maps.Geocoder();
        }

        function showLocationOnMap(address) {
            geocoder.geocode({ 'address': address + ', Turkey' }, (results, status) => {
                if (status === 'OK' && results[0]) {
                    const location = results[0].geometry.location;
                    map.setCenter(location);
                    marker.setPosition(location);
                    marker.setMap(map);
                } else {
                    console.error(`Geocode failed for "${address}" with status: ${status}`);
                    marker.setMap(null);
                }
            });
        }
    </script>

    <!-- IMPORTANT: Remember to replace YOUR_API_KEY with your actual Google Maps API Key. -->
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap"></script>
}
